package com.acs560.dons_pay_backend.service;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.stereotype.Service;

@Service
public class AuthService {
    private static final Logger logger = LoggerFactory.getLogger(AuthService.class);
    private final AuthenticationManager authenticationManager;
    private final UserService userService;

    public AuthService(AuthenticationManager authenticationManager, UserService userService) {
        this.authenticationManager = authenticationManager;
        this.userService = userService;
    }

    public String login(String email, String password) {
        try {
            logger.debug("Attempting to authenticate user with email: {}", email);
            
            // First check if credentials are valid using UserService
            boolean isValid = userService.authenticateUser(email, password);
            logger.debug("Credential validation result: {}", isValid);
            
            if (!isValid) {
                logger.debug("Invalid credentials detected in preliminary check");
                throw new AuthenticationException("Invalid credentials") {};
            }

            // Proceed with Spring Security authentication
            Authentication authentication = authenticationManager.authenticate(
                new UsernamePasswordAuthenticationToken(email, password)
            );
            
            if (authentication.isAuthenticated()) {
                logger.debug("Authentication successful for user: {}", email);
                return "Login successful for user: " + authentication.getName();
            } else {
                logger.debug("Authentication failed - not authenticated");
                throw new AuthenticationException("Authentication failed") {};
            }
        } catch (AuthenticationException e) {
            logger.error("Authentication failed for user: {}", email, e);
            throw new AuthenticationException("Invalid credentials: " + e.getMessage()) {};
        }
    }
}